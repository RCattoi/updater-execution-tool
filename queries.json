{
  "backlog2023": "WITH oec AS ( SELECT DISTINCT order_id, option_id, ReferenceUnitCost, LowerLimitFlightUnitCost, ReferenceFlightUnitCost, FROM `bi-data-science.operations.tj_all_revised_operation_estimated_costs` ), oo AS ( SELECT DISTINCT order_id, DestinationType, option_id, operation_id, city_name, LastFormFillDateBRT, FirstWishDateBRT, SecondWishDateBRT, ThirdWishDateBRT, LastValidDateBRT, OrderPeople, OrderPeopleNotCancelled, status_name, operation_status_name, ConciliatedVouchers, operation_deleted, FormOriginCity, FilledForm, PreOperationStatus, package_date_format, OriginalFirstValidDateBRT, OriginalLastValidDatebrt, OrderDateBRt FROM `bi-data-science.operations.OperationOrders` ) SELECT DISTINCT oo.order_id AS Pedidos, oo.operation_id, oo.orderdatebrt, DATE_DIFF(oo.LastValidDateBRT,oo.OrderDateBRT, month) DistanciaCompraValidadeEmMes, FirstWishDateBRT, SecondWishDateBRT, ThirdWishDateBRT, DATE_ADD(FirstWishDateBRT, INTERVAL -45 DAY) AS SLA, agosto.order_id AS PedidoImpactAgosto, IF (oo.orderdatebrt > '2022-08-05', 'Novo Regulamento','Regulamento Antigo') AS AnaliseRegulamento, oo.OriginalLastValidDatebrt, oo.OrderPeopleNotCancelled, oo.package_date_format, oo.DestinationType, oia.gateway, oo.LastValidDateBRT, oo.status_name, oo.operation_status_name, oo.PreOperationStatus, ROUND(oia.TotalSale * oo.orderpeoplenotcancelled) AS ValorTotalOFerta, ROUND(oia.AmountPaidBRL * oo.orderpeoplenotcancelled) AS ValorPago, ROUND((MIN(oec.LowerLimitFlightUnitCost)* oo.OrderPeopleNotCancelled),0) AS CustoEstimadoAereo, ROUND((MIN(oec.ReferenceUnitCost)* oo.OrderPeopleNotCancelled),0) AS CustoEstimadoPacote, ROUND((oia.TotalSale * oo.orderpeoplenotcancelled - (MIN(oec.ReferenceUnitCost)* oo.OrderPeopleNotCancelled)),0) AS Margem, CASE WHEN oo.order_id = tdr.order_id AND maio.Contingencia IS NULL AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual ='Não') AND (imp.Contingencia IS NULL OR imp.Contingencia ='Não') AND dej.Base IS NULL AND junho.Contingencia IS NULL THEN 'Roteado 2022' WHEN maio.Contingencia LIKE 'Contingência 3.3%' THEN 'Duplamente Roteados 2023' WHEN junho.Contingencia LIKE 'Contingência 7.3%' THEN 'Duplamente Roteados 2023' WHEN maio.Contingencia LIKE 'Contingência 3.2%' THEN 'Duplamente Roteados 2022 e 2023' WHEN junho.Contingencia LIKE 'Contingência 7.2%' THEN 'Duplamente Roteados 2022 e 2023' WHEN (dej.base = 'Roteados 2022 MP Pandemia' OR dej.base = 'Roteados 2022 SEM cobertura da MP') THEN 'Duplamente Roteados 2022 e 2023' WHEN imp2.AcaoPontual IN ('Contingência 2.2.1', 'Contingência 2.3.1') THEN 'Roteados 2023 - Indisponibilidade' WHEN imp.Contingencia IN ('Contingência 1.4.1', 'Contingência 1.4.2') THEN 'Roteados 2023 - Indisponibilidade' WHEN maio.Contingencia IS NULL AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual = 'Não') AND ( imp.Contingencia IS NULL OR imp.Contingencia ='Não') AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual = 'Não') AND dej.Base IS NULL AND junho.contingencia IS NULL AND agosto.order_id IS NULL THEN 'Nativo' WHEN maio.Contingencia IN ('Contingência 3.4.2.1', 'Contingência 3.1.2', 'Contingência 3.1.1', 'Contingência 3.4.1', 'Contingência 3.4.2.2', 'Contingência 3.4.2.3') THEN 'Roteados 2023 - Indisponibilidade' WHEN junho.Contingencia IN ('Contingência 7.4.2.1', 'Contingência 7.1.2.1', 'Contingência 7.1.2.2', 'Contingência 7.1.2.3', 'Contingência 7.4.2.3', 'Contingência 7.4.2.2') THEN 'Roteados 2023 - Indisponibilidade' WHEN imp2.AcaoPontual NOT IN ('Contingência 2.2.1', 'Contingência 2.3.1') AND imp2.AcaoPontual <> 'Não' THEN 'Roteados 2023 - Indisponibilidade' WHEN imp.Contingencia NOT IN ('Contingência 1.4.1', 'Contingência 1.4.2') AND imp.Contingencia <> 'Não' THEN 'Roteados 2023 - Indisponibilidade' WHEN dej.base NOT IN ('Roteados 2022 MP Pandemia', 'Roteados 2022 SEM cobertura da MP') THEN 'Roteados 2023 - Indisponibilidade' WHEN agosto.order_id IS NOT NULL THEN 'Roteado Agosto' ELSE '-' END AS AnaliseRouting FROM oo LEFT JOIN oec ON oo.option_id = oec.option_id LEFT JOIN `bi-data-science.marketing.OrderItemAnalysis` AS oia ON oo.order_id = oia.order_id LEFT JOIN `routing-348619.Routing.Impactados_1_Semestre_Routing` AS imp ON oo.order_id = imp.order_id LEFT JOIN `routing-348619.Routing.Impactados_2_Quarter` AS imp2 ON oo.order_id = imp2.order_id LEFT JOIN `routing-348619.Routing.Disparos_Emerg_Juridicos_2023` AS dej ON oo.order_id = dej.order_id LEFT JOIN `routing-348619.Routing.Backlog_Maio_2023` AS maio ON oo.order_id = maio.order_id LEFT JOIN `routing-348619.Routing.TodosDisparosRouting` AS tdr ON oo.order_id = tdr.order_id LEFT JOIN routing-348619.Routing.Backlog_Junho_2023 AS junho ON oo.order_id = junho.order_id LEFT JOIN `routing-348619.Routing.Impactados_Agosto` AS agosto ON oo.order_id = agosto.order_id WHERE oo.firstwishdatebrt BETWEEN '2023-03-01' AND '2023-12-31' AND ((oo.ConciliatedVouchers > 0 AND oo.operation_deleted IS FALSE) OR (oo.operation_deleted IS NULL)) AND ((oo.FormOriginCity <> 'Terrestre') OR (oo.FormOriginCity IS NULL)) AND (oo.operation_status_name IN ('Atribuído', 'Cotação aérea rejeitada', 'Contato sem sucesso', 'Cotando aéreo','Aguardando confirmação') OR oo.operation_status_name IS NULL) AND oo.status_name IN ('Aprovado', 'Parcial') GROUP BY oo.LastFormFillDateBRT, oo.order_id, oo.FirstWishDateBRT, oo.status_name, oo.operation_status_name, oo.OrderPeople, oo.DestinationType, oo.LastValidDateBRT, oo.OrderPeopleNotCancelled, oo.option_id, oo.city_name, SecondWishDateBRT, ThirdWishDateBRT, oo.operation_id, tdr.order_id, maio.order_id, imp.order_id, imp2.order_id, dej.order_id, tdr.disparo, dej.Base, imp.Contingencia, imp2.AcaoPontual, maio.Contingencia, oo.FilledForm, junho.Contingencia, oo.PreOperationStatus, oo.package_date_format, oo.originalfirstvaliddatebrt, oo.OrderDateBRT, oo.originallastvaliddatebrt, oia.AmountPaidBRL, oo.orderdatebrt, oo.operation_id, agosto.order_id, oia.TotalSale, oia.gateway, SecondWishDateBRT, ThirdWishDateBRT",
  "salesSeason1": "SELECT DISTINCT oo.order_id, oo.orderdatebrt, status_name, operation_status_name, oo.firstvaliddatebrt, oo.LastValidDateBRT, FilledForm, PreOperationStatus, IF (oo.orderpeoplenotcancelled = 0 AND status_name IN ('Devolvido', 'Cancelado', 'Solicitação em Andamento'), oo.OrderPeople, oo.OrderPeopleNotCancelled) AS Pax, ROUND(AVG(oec.LowerLimitCost),0) AS Custo, ROUND(oia.TotalSaleBRL,0) AS ValorFaturadoVoucher, case when (oo.operation_status_name IN ('Atribuído', 'Cotação aérea rejeitada', 'Contato sem sucesso', 'Cotando aéreo', 'Aéreo cotado', 'Cotação aérea confirmada') OR oo.operation_status_name IS NULL) and status_name in ('Aprovado','Parcial') Then 'A Operar' when oo.operation_status_name in ('Finalizado, voucher emitido', 'Emitindo reserva de hotel', 'Reserva de hotel emitida','Aéreo emitido') and status_name in ('Aprovado','Parcial') Then 'Operado' when status_name in ('Devolvido','Cancelado','Solicitação em Andamento') or operation_status_name = 'Cancelada' then 'Cancelado' when status_name = 'Voucher expirado' then 'Voucher Expirado' when status_name = 'Parcialmente Aprovado' Then 'Ainda Pagando' else '' end as AnaliseStatus FROM `bi-data-science.operations.OperationOrders` AS oo LEFT JOIN `bi-data-science.operations.OperationEstimatedCosts` AS oec ON oo.option_id = oec.option_id LEFT JOIN `bi-data-science.marketing.OrderItemAnalysis` AS oia ON oo.order_id = oia.order_id WHERE oo.orderdatebrt >= '2019-01-01' GROUP BY oo.order_id, status_name, operation_status_name, oo.FirstValidDateBRT, oo.LastValidDateBRT, oia.TotalSaleBRL, oia.SalePriceBRL, oo.orderpeople, oo.orderpeoplenotcancelled, oo.orderdatebrt, FilledForm, PreOperationStatus",
  "salesSeason2": "SELECT DISTINCT oo.order_id, oo.orderdatebrt, oo.operation_id, oo.OrderPeopleNotCancelled, if(oo.orderdatebrt <= '2020-01-01',round(oia.TotalSaleBRL,0), Round(oia.TotalSale * oo.OrderPeopleNotCancelled,0)) AS ValorFaturado, round((oc.TotalCostPerVoucherBRL * oo.OrderPeopleNotCancelled),0) as Custo, round((oia.TotalSale * oo.OrderPeopleNotCancelled) - (oc.TotalCostPerVoucherBRL * oo.OrderPeopleNotCancelled),0) as Diferenca FROM `bi-data-science.operations.OperationOrders` AS oo LEFT JOIN `bi-data-science.marketing.OrderItemAnalysis` AS oia ON oo.order_id = oia.order_id LEFT JOIN `bi-data-science.operations.tj_revised_operated_costs` AS oc on oo.operation_id = oc.operation_id where oo.OrderDateBRT >= '2019-01-01' and round((oc.TotalCostPerVoucherBRL * oo.OrderPeopleNotCancelled),0) > 0 and oo.operation_status_name like 'Finalizado, voucher emitido' and lower(oo.option_title) not like '%inclusão de infant%' and lower(oo.option_title) not like '%inclusão de bebês%' and lower(oo.option_title) not like '%extensão%' and lower(oo.option_title) not like '%upgrade%' and lower(oo.option_title) not like '%pacote de extensão%' and oo.operation_id <> 60474",
  "executedOperations": "WITH voos AS ( SELECT operation_id, IF(STRING_AGG(DISTINCT airline order by airline) = 'Hurb', 'Terrestre', STRING_AGG(DISTINCT airline order by airline)) AS airline, STRING_AGG(DISTINCT tracker order by tracker) AS tracker, STRING_AGG(DISTINCT tracker_type order by tracker_type) AS tracker_type FROM `bi-data-science.operations.OperationAirTravels` WHERE (AirTravelDeleted IS FALSE OR AirTravelDeleted IS NULL) AND (flight_deleted IS FALSE OR flight_deleted IS NULL) AND status LIKE 'Ativo' GROUP BY operation_id ), hoteis AS ( SELECT operation_id, STRING_AGG(DISTINCT hotel) AS hotel, STRING_AGG(DISTINCT CAST(reservation_code AS STRING)) AS reservation_code, STRING_AGG(DISTINCT supplier) AS supplier FROM `bi-data-science.operations.OperationHotelReservations` GROUP BY operation_id ), Num_pax AS ( SELECT operation_id, SUM(OrderPeopleNotCancelled) AS OrderPeopleNotCancelled FROM `bi-data-science.operations.OperationOrders` WHERE OrderPeopleNotCancelled > 0 AND ConciliatedVouchers > 0 GROUP BY operation_id ) SELECT Num_pax.OrderPeopleNotCancelled, package_date_format, operation_id, hotel, reservation_code, airline, tracker, tracker_type, supplier, COALESCE (TravelStartDateBRT,FirstWishDateBRT) AS TravelStartDateBRT, STRING_AGG(DISTINCT operation_status_name) AS operation_status_name, STRING_AGG(DISTINCT DestinationType LIMIT 1) AS DestinationType, STRING_AGG(DISTINCT city_name) AS city_name, STRING_AGG(DISTINCT flight_class LIMIT 1) AS flight_class, ANY_VALUE(option_qty_dailies) AS option_qty_dailies, STRING_AGG(DISTINCT establishment_name) AS establishment_name, STRING_AGG(DISTINCT CAST(order_id AS STRING)) AS order_id, STRING_AGG(DISTINCT FormOriginCity) AS FormOriginCity, STRING_AGG(DISTINCT CAST(offer_id AS STRING)) AS offer_id, CASE WHEN STRING_AGG(DISTINCT state_name LIMIT 1) IN ('Amazonas', 'Pará', 'Acre', 'Roraima', 'Rondônia', 'Amapá', 'Tocantins') THEN 'Norte' WHEN STRING_AGG(DISTINCT state_name LIMIT 1) IN ('Maranhão', 'Piauí', 'Ceará', 'Rio Grande do Norte', 'Paraíba', 'Pernambuco', 'Alagoas', 'Sergipe', 'Bahia') THEN 'Nordeste' WHEN STRING_AGG(DISTINCT state_name LIMIT 1) IN ('Goiás', 'Mato Grosso', 'Mato Grosso do Sul', 'Distrito Federal') THEN 'Centro-Oeste' WHEN STRING_AGG(DISTINCT state_name LIMIT 1) IN ('Rio de Janeiro', 'São Paulo', 'Espírito Santo', 'Minas Gerais') THEN 'Sudeste' WHEN STRING_AGG(DISTINCT state_name LIMIT 1) IN ('Rio Grande do Sul', 'Paraná', 'Santa Catarina') THEN 'Sul' ELSE 'Internacional' END AS regiao FROM `bi-data-science.operations.OperationOrders` LEFT JOIN voos USING (operation_id) LEFT JOIN hoteis USING (operation_id) INNER JOIN Num_pax USING (operation_id) WHERE (operation_deleted IS FALSE OR operation_deleted IS NULL) AND status_name IN ('Aprovado', 'Parcial') AND operation_status_name IN ('Cotação aérea confirmada', 'Emitindo aéreo', 'Aéreo emitido', 'Reserva de hotel emitida', 'Emitindo reserva de hotel', 'Finalizado, voucher emitido', 'Aguardando confirmação') AND LOWER(option_title) NOT LIKE '%inclusão de infant%' AND LOWER(option_title) NOT LIKE '%inclusão de bebês%' AND LOWER(option_title) NOT LIKE '%extensão%' AND LOWER(option_title) NOT LIKE '%upgrade%' AND LOWER(option_title) NOT LIKE '%pacote de extensão%' AND LOWER(option_title) NOT LIKE '%link especial - extensão%' AND LOWER(option_description) NOT LIKE '%taxa referente%' AND LOWER(establishment_name) NOT LIKE '%extensão%' AND OrderDateBRT >= '2017-01-01' GROUP BY Num_pax.OrderPeopleNotCancelled, package_date_format, TravelStartDateBRT, operation_id, hotel, reservation_code, airline, tracker, tracker_type, supplier",
  "nonFilledForms": "SELECT DISTINCT offer_id, city_name, OrderPeopleNotCancelled, flight_class, order_id, OperationType, status_name, LastValidDateBRT, DestinationType, OrderOriginCity, package_date_format, option_qty_dailies, establishment_name, OrderDateBRT, state_name, CASE WHEN state_name IN ('Amazonas', 'Pará', 'Acre', 'Roraima', 'Rondônia', 'Amapá', 'Tocantins') THEN 'Norte' WHEN state_name IN ('Maranhão', 'Piauí', 'Ceará', 'Rio Grande do Norte', 'Paraíba', 'Pernambuco', 'Alagoas', 'Sergipe', 'Bahia') THEN 'Nordeste' WHEN state_name IN ('Goiás', 'Mato Grosso', 'Mato Grosso do Sul', 'Distrito Federal') THEN 'Centro-Oeste' WHEN state_name IN ('Rio de Janeiro', 'São Paulo', 'Espírito Santo', 'Minas Gerais') THEN 'Sudeste' WHEN state_name IN ('Rio Grande do Sul', 'Paraná', 'Santa Catarina') THEN 'Sul' ELSE 'Internacional' END AS regiao FROM `bi-data-science.operations.OperationOrders` WHERE (operation_deleted IS FALSE OR operation_deleted IS NULL) AND OrderPeopleNotCancelled > 0 AND status_name IN ('Aprovado', 'Parcial', 'Parcialmente Aprovado') AND FilledForm IS NULL AND flight_class IS NOT NULL AND LOWER(option_title) NOT LIKE '%inclusão de infant%' AND LOWER(option_title) NOT LIKE '%inclusão de bebês%' AND LOWER(option_title) NOT LIKE '%extensão%' AND LOWER(option_title) NOT LIKE '%upgrade%' AND LOWER(option_title) NOT LIKE '%pacote de extensão%' AND LOWER(option_title) NOT LIKE '%link especial - extensão%' AND LOWER(option_description) NOT LIKE '%taxa referente%' AND LOWER(establishment_name) NOT LIKE '%extensão%'",
  "routing": "WITH oec AS ( SELECT DISTINCT order_id, option_id, ReferenceUnitCost, ReferenceFlightUnitCost, FROM `bi-data-science.operations.tj_all_revised_operation_estimated_costs` ), oo AS ( SELECT DISTINCT order_id, DestinationType, option_id, operation_id, city_name, LastFormFillDateBRT, FirstWishDateBRT, SecondWishDateBRT, ThirdWishDateBRT, LastValidDateBRT, OrderPeople, OrderPeopleNotCancelled, status_name, operation_status_name, ConciliatedVouchers, operation_deleted, FormOriginCity, FilledForm, PreOperationStatus, package_date_format, OriginalFirstValidDateBRT, OriginalLastValidDatebrt, OrderDateBRt FROM `bi-data-science.operations.OperationOrders` ) SELECT DISTINCT oo.order_id as Pedidos, oo.operation_id, oo.orderdatebrt, DATE_DIFF(oo.LastValidDateBRT,oo.OrderDateBRT, month) DistanciaCompraValidadeEmMes, FirstWishDateBRT, DATE_ADD(FirstWishDateBRT, INTERVAL -45 DAY) AS SLA, agosto.order_id as PedidoImpactAgosto, IF (oo.orderdatebrt > '2022-08-05', 'Novo Regulamento','Regulamento Antigo') AS AnaliseRegulamento, /*IF (oo.OriginalLastValidDatebrt <oo.lastvaliddatebrt, 'Validade Extendidade','Validade Normal') AS AnaliseValidade,*/ oo.OriginalLastValidDatebrt, oo.OrderPeopleNotCancelled, oo.package_date_format, oo.DestinationType, oo.LastValidDateBRT, oo.status_name, oo.operation_status_name, oo.PreOperationStatus, round(oia.TotalSaleBRL * oo.orderpeoplenotcancelled,0) as ValorOferta, round(oia.AmountPaidBRL * oo.orderpeoplenotcancelled , 0) as ValorPago, ROUND((MIN(oec.ReferenceUnitCost)* oo.OrderPeopleNotCancelled),0) AS CustoEstimadoPacote, CASE WHEN oo.order_id = tdr.order_id AND maio.Contingencia IS NULL AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual ='Não') AND (imp.Contingencia IS NULL OR imp.Contingencia ='Não') AND dej.Base IS NULL AND junho.Contingencia IS NULL THEN 'Roteado 2022' WHEN maio.Contingencia LIKE 'Contingência 3.3%' THEN 'Duplamente Roteados 2023' WHEN junho.Contingencia LIKE 'Contingência 7.3%' THEN 'Duplamente Roteados 2023' WHEN maio.Contingencia LIKE 'Contingência 3.2%' THEN 'Duplamente Roteados 2022 e 2023' WHEN junho.Contingencia LIKE 'Contingência 7.2%' THEN 'Duplamente Roteados 2022 e 2023' WHEN (dej.base = 'Roteados 2022 MP Pandemia' OR dej.base = 'Roteados 2022 SEM cobertura da MP') THEN 'Duplamente Roteados 2022 e 2023' WHEN maio.Contingencia IN ('Contingência 3.4.2.2', 'Contingência 3.4.2.3') THEN 'Roteados 2023 - Movimentação Mandatória' WHEN junho.Contingencia IN ('Contingência 7.1.2.2', 'Contingência 7.1.2.3', 'Contingência 7.4.2.3', 'Contingência 7.4.2.2') THEN 'Roteados 2023 - Movimentação Mandatória' WHEN imp2.AcaoPontual IN ('Contingência 2.2.1', 'Contingência 2.3.1') THEN 'Roteados 2023 - Movimentação Mandatória' WHEN imp.Contingencia IN ('Contingência 1.4.1', 'Contingência 1.4.2') THEN 'Roteados 2023 - Movimentação Mandatória' WHEN maio.Contingencia IS NULL AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual = 'Não') AND ( imp.Contingencia IS NULL OR imp.Contingencia ='Não') AND (imp2.AcaoPontual IS NULL OR imp2.AcaoPontual = 'Não') AND dej.Base IS NULL AND junho.contingencia IS NULL and agosto.order_id is null THEN 'Nativo' WHEN maio.Contingencia IN ('Contingência 3.4.2.1', 'Contingência 3.1.2', 'Contingência 3.1.1', 'Contingência 3.4.1') THEN 'Roteados 2023 - Indisponibilidade' WHEN junho.Contingencia IN ('Contingência 7.4.2.1', 'Contingência 7.1.2.1') THEN 'Roteados 2023 - Indisponibilidade' WHEN imp2.AcaoPontual NOT IN ('Contingência 2.2.1', 'Contingência 2.3.1') AND imp2.AcaoPontual <> 'Não' THEN 'Roteados 2023 - Indisponibilidade' WHEN imp.Contingencia NOT IN ('Contingência 1.4.1', 'Contingência 1.4.2') AND imp.Contingencia <> 'Não' THEN 'Roteados 2023 - Indisponibilidade' when dej.base not in ('Roteados 2022 MP Pandemia', 'Roteados 2022 SEM cobertura da MP') then 'Roteados 2023 - Indisponibilidade' when agosto.order_id is not null then 'Roteado Agosto' ELSE '-' END AS AnaliseRouting FROM oo LEFT JOIN oec ON oo.option_id = oec.option_id LEFT JOIN `bi-data-science.marketing.OrderItemAnalysis` AS oia ON oo.order_id = oia.order_id LEFT JOIN `routing-348619.Routing.Impactados_1_Semestre_Routing` AS imp ON oo.order_id = imp.order_id LEFT JOIN `routing-348619.Routing.Impactados_2_Quarter` AS imp2 ON oo.order_id = imp2.order_id LEFT JOIN `routing-348619.Routing.Disparos_Emerg_Juridicos_2023` AS dej ON oo.order_id = dej.order_id LEFT JOIN `routing-348619.Routing.Backlog_Maio_2023` AS maio ON oo.order_id = maio.order_id LEFT JOIN `routing-348619.Routing.TodosDisparosRouting` AS tdr ON oo.order_id = tdr.order_id LEFT JOIN routing-348619.Routing.Backlog_Junho_2023 AS junho ON oo.order_id = junho.order_id left join `routing-348619.Routing.Impactados_Agosto` as agosto on oo.order_id = agosto.order_id WHERE oo.firstwishdatebrt BETWEEN '2023-03-01' AND '2023-12-31' -- AND oo.LastValidDateBRT <= '2023-12-30' AND ((oo.ConciliatedVouchers > 0 AND oo.operation_deleted IS FALSE) OR (oo.operation_deleted IS NULL)) AND ((oo.FormOriginCity <> 'Terrestre') OR (oo.FormOriginCity IS NULL)) AND (oo.operation_status_name IN ('Atribuído', 'Cotação aérea rejeitada', 'Contato sem sucesso', 'Cotando aéreo','Aguardando confirmação') OR oo.operation_status_name IS NULL) AND oo.status_name IN ('Aprovado', 'Parcial') GROUP BY oo.LastFormFillDateBRT, oo.order_id, oo.FirstWishDateBRT, oo.status_name, oo.operation_status_name, oo.OrderPeople, oo.DestinationType, oo.LastValidDateBRT, oo.OrderPeopleNotCancelled, oo.option_id, oo.city_name, SecondWishDateBRT, ThirdWishDateBRT, oo.operation_id, tdr.order_id, maio.order_id, imp.order_id, imp2.order_id, dej.order_id, tdr.disparo, dej.Base, imp.Contingencia, imp2.AcaoPontual, maio.Contingencia, oo.FilledForm, junho.Contingencia, oo.PreOperationStatus, oo.package_date_format, oo.originalfirstvaliddatebrt, oo.OrderDateBRT, oo.originallastvaliddatebrt, oia.AmountPaidBRL, oo.orderdatebrt, oo.operation_id, agosto.order_id, oia.TotalSaleBRL",
  "filledForms": "SELECT DISTINCT offer_id, status_name, FirstWishDateBRT, city_name, OrderPeopleNotCancelled, flight_class, IF (operation_status_name IN ('Cotando aéreo', 'Aéreo cotado', 'Cotação aérea rejeitada', 'Atribuído', 'Contato sem sucesso', 'Cancelada'), operation_status_name, 'Não operado') AS operation_status_name, order_id, OperationType, DestinationType, FormOriginCity, package_date_format, option_qty_dailies, establishment_name, IF (PreOperationStatus IN ('OK', 'Pendente'), PreOperationStatus, 'Não pré-operado') AS PreOperationStatus, OrderDateBRT, product_name, state_name, CASE WHEN state_name IN ('Amazonas', 'Pará', 'Acre', 'Roraima', 'Rondônia', 'Amapá', 'Tocantins') THEN 'Norte' WHEN state_name IN ('Maranhão', 'Piauí', 'Ceará', 'Rio Grande do Norte', 'Paraíba', 'Pernambuco', 'Alagoas', 'Sergipe', 'Bahia') THEN 'Nordeste' WHEN state_name IN ('Goiás', 'Mato Grosso', 'Mato Grosso do Sul', 'Distrito Federal') THEN 'Centro-Oeste' WHEN state_name IN ('Rio de Janeiro', 'São Paulo', 'Espírito Santo', 'Minas Gerais') THEN 'Sudeste' WHEN state_name IN ('Rio Grande do Sul', 'Paraná', 'Santa Catarina') THEN 'Sul' ELSE 'Internacional' END AS regiao FROM `bi-data-science.operations.OperationOrders` WHERE (operation_deleted IS FALSE OR operation_deleted IS NULL) AND (operation_status_name IN ('Cotando aéreo', 'Aéreo cotado', 'Cotação aérea rejeitada', 'Atribuído', 'Contato sem sucesso', 'Cancelada') OR operation_status_name IS NULL) AND status_name IN ('Aprovado', 'Parcial', 'Parcialmente Aprovado') AND OrderPeopleNotCancelled > 0 AND FilledForm = 'Sim' AND LOWER(option_title) NOT LIKE '%inclusão de infant%' AND LOWER(option_title) NOT LIKE '%inclusão de bebês%' AND LOWER(option_title) NOT LIKE '%extensão%' AND LOWER(option_title) NOT LIKE '%upgrade%' AND LOWER(option_title) NOT LIKE '%pacote de extensão%' AND LOWER(option_title) NOT LIKE '%link especial - extensão%' AND LOWER(option_description) NOT LIKE '%taxa referente%' AND LOWER(establishment_name) NOT LIKE '%extensão%' AND LOWER(product_name) NOT LIKE '%extensão%' AND OrderDateBRT >= '2019-01-01'",
  "airIssues": "WITH AirTicketIssueDate AS ( SELECT DISTINCT operation_id, LastAirTicketIssueDateBRT FROM `bi-data-science.operations.OperationStatusChanges` WHERE (LastAirTicketIssueDateBRT >= '2023-01-01') ), AirTravel AS ( SELECT operation_id, STRING_AGG (DISTINCT tracker_type ORDER BY tracker_type) AS tracker_type, STRING_AGG (DISTINCT airline ORDER BY airline) AS airline FROM `bi-data-science.operations.OperationAirTravels` WHERE status = 'Ativo' GROUP BY operation_id ) SELECT operation_id, tracker_type, LastAirTicketIssueDateBRT, airline, DestinationType, SUM (OrderPeopleNotCancelled) AS PAX FROM `bi-data-science.operations.OperationOrders` INNER JOIN AirTravel USING(operation_id) INNER JOIN AirTicketIssueDate USING(operation_id) WHERE (operation_deleted IS FALSE OR operation_deleted IS NULL) AND OrderPeopleNotCancelled > 0 AND ConciliatedVouchers > 0 AND operation_status_id IN (6,7,8,9) AND FormOriginCity <> 'Terrestre' GROUP BY operation_id, LastAirTicketIssueDateBRT, DestinationType, airline, tracker_type ORDER BY operation_id",
  "backlogByVality": "SELECT DISTINCT offer_id, status_name, city_name, OrderPeopleNotCancelled, COALESCE(FilledForm, 'Não') AS FilledForm, FirstWishDateBRT, flight_class, COALESCE(operation_status_name, 'Não operado') AS operation_status_name, order_id, OperationType, DestinationType, COALESCE(FormOriginCity, OrderOriginCity) AS Origem, LastValidDateBRT, package_date_format, option_qty_dailies, establishment_name, CASE WHEN PreOperationStatus IN ('OK', 'Pendente') THEN PreOperationStatus ELSE 'Não pré-operado' END AS PreOperationStatus, OrderDateBRT, product_name, state_name, CASE WHEN state_name IN ('Amazonas', 'Pará', 'Acre', 'Roraima', 'Rondônia', 'Amapá', 'Tocantins') THEN 'Norte' WHEN state_name IN ('Maranhão', 'Piauí', 'Ceará', 'Rio Grande do Norte', 'Paraíba', 'Pernambuco', 'Alagoas', 'Sergipe', 'Bahia') THEN 'Nordeste' WHEN state_name IN ('Goiás', 'Mato Grosso', 'Mato Grosso do Sul', 'Distrito Federal') THEN 'Centro-Oeste' WHEN state_name IN ('Rio de Janeiro', 'São Paulo', 'Espírito Santo', 'Minas Gerais') THEN 'Sudeste' WHEN state_name IN ('Rio Grande do Sul', 'Paraná', 'Santa Catarina') THEN 'Sul' ELSE 'Internacional' END AS regiao FROM `bi-data-science.operations.OperationOrders` WHERE IFNULL(operation_deleted, FALSE) = FALSE AND (operation_status_name IN ('Cotando aéreo', 'Aéreo cotado', 'Cotação aérea rejeitada', 'Atribuído', 'Contato sem sucesso') OR operation_status_name IS NULL) AND status_name IN ('Aprovado', 'Parcial', 'Parcialmente Aprovado') AND OrderPeopleNotCancelled > 0 AND NOT (LOWER(option_title) LIKE '%inclusão de infant%' OR LOWER(option_title) LIKE '%inclusão de bebês%' OR LOWER(option_title) LIKE '%extensão%' OR LOWER(option_title) LIKE '%upgrade%' OR LOWER(option_title) LIKE '%pacote de extensão%' OR LOWER(option_title) LIKE '%link especial - extensão%') AND LOWER(option_description) NOT LIKE '%taxa referente%' AND LOWER(establishment_name) NOT LIKE '%extensão%' AND LOWER(product_name) NOT LIKE '%extensão%' AND OrderDateBRT >= '2019-01-01'",
  "terrestrialEmission": "WITH SentVoucherDateBRT AS ( SELECT DISTINCT operation_id, LastSentVoucherDateBRT FROM `bi-data-science.operations.OperationStatusChanges` WHERE (LastSentVoucherDateBRT >= '2023-01-01') ) SELECT operation_id, LastSentVoucherDateBRT, DestinationType, establishment_name, option_qty_dailies, city_name, SUM (OrderPeopleNotCancelled) AS PAX FROM `bi-data-science.operations.OperationOrders` INNER JOIN SentVoucherDateBRT USING(operation_id) WHERE (operation_deleted IS FALSE OR operation_deleted IS NULL) AND OrderPeopleNotCancelled > 0 AND ConciliatedVouchers > 0 AND operation_status_id IN (7,8) GROUP BY operation_id, LastSentVoucherDateBRT, DestinationType, establishment_name, option_qty_dailies, city_name",
  "emissionsFromActions": "WITH selectedOrders AS ( SELECT operation_id, STRING_AGG(DISTINCT emissionType ORDER BY emissionType) AS emissionType FROM ( ( SELECT operation_id, 'Tutelas' AS emissionType FROM `bi-data-science.customer_experience.CXTicketTags` LEFT JOIN `bi-data-science.customer_experience.CXTickets` USING(ticket_id) LEFT JOIN `bi-data-science.operations.OperationOrders` USING(order_id) WHERE ticket_tag_name LIKE '%jurídico___tutela%' GROUP BY operation_id, emissionType ) UNION ALL ( SELECT SAFE_CAST(operation_id AS INT64) AS operation_id, 'Projeto Desfazer' AS emissionType FROM `execution-tool-op.dashboards.desfazerFlightOptionsSent` ) UNION ALL ( SELECT SAFE_CAST(operation_id AS INT64) AS operation_id, 'Ação Data fixa' AS emissionType FROM `execution-tool-op.dashboards.AcaoDataFixa` ) UNION ALL ( SELECT SAFE_CAST(operation_id AS INT64) AS operation_id, 'Ações Terrestre' AS emissionType FROM `execution-tool-op.dashboards.terrestial_actions` ) UNION ALL ( SELECT SAFE_CAST(operation_id AS INT64) AS operation_id, 'Ação Afiliados' AS emissionType FROM `execution-tool-op.dashboards.affiliatesAction` ) ) GROUP BY operation_id ), servicesAndExpenses AS ( SELECT operation_id, SUM(cost) AS ServicesAndExpensesCostBRL FROM `bi-data-science.operations.OperationServicesAndExpenses` GROUP BY operation_id ), ordersExpensesData AS ( SELECT DISTINCT order_id, product_name, o.option_id, FlightCostPerVoucherBRL, HotelCostPerVoucherPerNightBRL FROM `bi-data-science.operations.OperationOrders` o LEFT JOIN `bi-data-science.operations.tj_revised_operated_costs` USING(operation_id) WHERE EXTRACT(YEAR FROM o.TravelStartDateBRT) >= 2021 ), estimatedCostsByOption AS ( SELECT DISTINCT option_id, PERCENTILE_CONT(FlightCostPerVoucherBRL, 0.5) OVER(PARTITION BY option_id) AS ReferenceFlightCostPerVoucher, PERCENTILE_CONT(HotelCostPerVoucherPerNightBRL, 0.5) OVER(PARTITION BY option_id) AS ReferenceHotelCostPerVoucherPerNight FROM ordersExpensesData ), estimatedCostsByEstablishment AS ( SELECT DISTINCT product_name, PERCENTILE_CONT(FlightCostPerVoucherBRL, 0.5) OVER(PARTITION BY product_name) AS ReferenceFlightCostPerVoucher, PERCENTILE_CONT(HotelCostPerVoucherPerNightBRL, 0.5) OVER(PARTITION BY product_name) AS ReferenceHotelCostPerVoucherPerNight FROM ordersExpensesData ), operationsData AS( SELECT DISTINCT operation_id, oo.order_id, oo.OrderPeopleNotCancelled, oc.ApprovedVouchers, LastSentVoucherDateBRT, FlightCostPerVoucherBRL, HotelCostPerVoucherPerNightBRL, oo.FormOriginCity, oo.city_name, ROUND(FlightCostPerVoucherBRL + HotelCostPerVoucherBRL, 2) AS FlightAndHotelCostPerVoucherBRL, IFNULL(ServicesAndExpensesCostBRL, 0) AS ServicesAndExpensesCostBRL, IFNULL(SAFE_DIVIDE(IFNULL(ServicesAndExpensesCostBRL, 0) , oc.ApprovedVouchers) * oo.OrderPeopleNotCancelled, 0) AS OrderServicesAndExpensesCostBRL, FIRST_VALUE(emission_date) OVER (PARTITION BY operation_id ORDER BY emission_date DESC) AS emission_date, ANY_VALUE(package_date_format) OVER (PARTITION BY operation_id ORDER BY emission_date DESC) AS package_date_format, ANY_VALUE(oo.establishment_name) OVER (PARTITION BY operation_id ORDER BY emission_date DESC) AS establishment_name, ANY_VALUE(DestinationType) OVER (PARTITION BY operation_id ORDER BY emission_date DESC) AS DestinationType, ROUND(AVG(COALESCE(ProjectionMedianRecommended, IF(ecop.ReferenceFlightCostPerVoucher IS NULL OR ecop.ReferenceFlightCostPerVoucher < 20, ecest.ReferenceFlightCostPerVoucher, ecop.ReferenceFlightCostPerVoucher),FlightCostPerVoucherBRL, 0)) OVER (PARTITION BY operation_id), 2) AS ProjectionMedianRecommended, ROUND(AVG(COALESCE(percentil_50, IF(ecop.ReferenceHotelCostPerVoucherPerNight IS NULL OR ecop.ReferenceHotelCostPerVoucherPerNight < 20, ecest.ReferenceHotelCostPerVoucherPerNight, ecop.ReferenceHotelCostPerVoucherPerNight),HotelCostPerVoucherPerNightBRL, 0)) OVER (PARTITION BY operation_id), 2) AS percentil_50, COALESCE(emissionType, package_date_format) AS emissionType, ANY_VALUE(option_qty_dailies) OVER (PARTITION BY operation_id) AS option_qty_dailies, ANY_VALUE(oo.operation_status_name) OVER (PARTITION BY operation_id) AS operation_status_name FROM `bi-data-science.operations.OperationOrders` oo LEFT JOIN `bi-data-science.operations.tj_revised_operated_costs` oc USING(operation_id) LEFT JOIN `bi-data-science.operations.OperationAirTravelFares` aitf USING(operation_id) LEFT JOIN `bi-data-science.operations.AirTicketsPriceProjectionsByOriginAndDestination` airProj ON oo.FormOriginCity = airProj.operation_origin AND oo.city_name = airProj.operation_destination AND EXTRACT(MONTH FROM COALESCE(oo.TravelStartDateBRT, FirstWishDateBRT)) = airProj.month AND EXTRACT(YEAR FROM COALESCE(oo.TravelStartDateBRT, FirstWishDateBRT)) = airProj.year LEFT JOIN `bi-data-science.operations.HotelCostsProjections` hotelProj ON oo.city_name = hotelProj.city AND EXTRACT(MONTH FROM COALESCE(oo.TravelStartDateBRT, FirstWishDateBRT)) = hotelProj.month AND EXTRACT(YEAR FROM COALESCE(oo.TravelStartDateBRT, FirstWishDateBRT)) = hotelProj.year LEFT JOIN `bi-data-science.operations.OperationStatusChanges` osc USING(operation_id) LEFT JOIN servicesAndExpenses USING(operation_id) LEFT JOIN estimatedCostsByOption ecop ON oo.option_id = ecop.option_id LEFT JOIN estimatedCostsByEstablishment ecest ON oo.product_name = ecest.product_name LEFT JOIN selectedOrders USING(operation_id) WHERE emission_date IS NOT NULL AND (oo.operation_deleted IS FALSE OR oo.operation_deleted IS NULL) AND oo.operation_status_name <> 'Cancelada' AND oo.ConciliatedVouchers > 0 AND oo.OrderPeopleNotCancelled > 0 AND operation_id IS NOT NULL AND FormOriginCity <> 'Terrestre' AND DATE(emission_date) BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 6 MONTH) AND CURRENT_DATE() AND oo.status_name IN ('Aprovado', 'Parcial') AND LOWER(oo.option_title) NOT LIKE '%inclusão de infant%' AND LOWER(oo.option_title) NOT LIKE '%inclusão de bebês%' AND LOWER(oo.option_title) NOT LIKE '%extensão%' AND LOWER(oo.option_title) NOT LIKE '%upgrade%' AND LOWER(oo.option_title) NOT LIKE '%pacote de extensão%' AND LOWER(oo.option_title) NOT LIKE '%link especial - extensão%' AND LOWER(oo.option_description) NOT LIKE '%taxa referente%' AND LOWER(oo.establishment_name) NOT LIKE '%extensão%' AND LOWER(oo.establishment_name) NOT LIKE '%especial%' ) SELECT *, percentil_50 * OrderPeopleNotCancelled * option_qty_dailies AS HotelProjection, ProjectionMedianRecommended * OrderPeopleNotCancelled AS AirTravelProjection, ProjectionMedianRecommended * OrderPeopleNotCancelled + percentil_50 * OrderPeopleNotCancelled * option_qty_dailies AS TotalProjection, CASE WHEN FlightCostPerVoucherBRL IS NULL OR FlightCostPerVoucherBRL = 0 THEN 'Sem Gastos' WHEN ProjectionMedianRecommended IS NULL OR ProjectionMedianRecommended = 0 THEN 'Sem Projeção' WHEN ProjectionMedianRecommended > FlightCostPerVoucherBRL THEN 'Houve Economia' WHEN ProjectionMedianRecommended < FlightCostPerVoucherBRL THEN 'Não houve Economia' ELSE 'Sem Projeção' END AS airExpensesAnalysis, (FlightCostPerVoucherBRL - ProjectionMedianRecommended) * OrderPeopleNotCancelled AS FlightDeviationBRL, ProjectionMedianRecommended > FlightCostPerVoucherBRL AS AirTravelProficiency, CASE WHEN HotelCostPerVoucherPerNightBRL IS NULL OR HotelCostPerVoucherPerNightBRL = 0 THEN 'Sem Gastos' WHEN percentil_50 IS NULL OR percentil_50 = 0 THEN 'Sem Projeção' WHEN percentil_50 > HotelCostPerVoucherPerNightBRL THEN 'Houve Economia' WHEN percentil_50 < HotelCostPerVoucherPerNightBRL THEN 'Não houve Economia' ELSE 'Sem Projeção' END AS hotelExpensesAnalysis, (HotelCostPerVoucherPerNightBRL - percentil_50) * OrderPeopleNotCancelled * option_qty_dailies AS HotelDeviationBRL, percentil_50 > HotelCostPerVoucherPerNightBRL AS HotelProficiency, CASE WHEN FlightAndHotelCostPerVoucherBRL IS NULL OR FlightAndHotelCostPerVoucherBRL = 0 THEN 'Sem Gastos' WHEN IFNULL(ProjectionMedianRecommended, percentil_50) IS NULL OR ProjectionMedianRecommended + percentil_50 = 0 THEN 'Sem Projeção' WHEN ProjectionMedianRecommended * OrderPeopleNotCancelled + percentil_50 * OrderPeopleNotCancelled * option_qty_dailies > FlightAndHotelCostPerVoucherBRL * OrderPeopleNotCancelled THEN 'Houve Economia' WHEN ProjectionMedianRecommended * OrderPeopleNotCancelled + percentil_50 * OrderPeopleNotCancelled * option_qty_dailies < FlightAndHotelCostPerVoucherBRL * OrderPeopleNotCancelled THEN 'Não houve Economia' ELSE 'Sem Projeção' END AS FlightAndHotelExpensesAnalysis, FlightAndHotelCostPerVoucherBRL * OrderPeopleNotCancelled - ProjectionMedianRecommended * OrderPeopleNotCancelled + percentil_50 * OrderPeopleNotCancelled * option_qty_dailies AS FlightAndHotelDeviationBRL, ProjectionMedianRecommended * OrderPeopleNotCancelled + percentil_50 * OrderPeopleNotCancelled * option_qty_dailies > FlightAndHotelCostPerVoucherBRL * OrderPeopleNotCancelled AS FlightAndHotelProficiency, FROM operationsData"
}
